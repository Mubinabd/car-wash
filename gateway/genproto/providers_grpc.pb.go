// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/providers.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ProviderService_RegisterProvider_FullMethodName = "/car_wash.ProviderService/RegisterProvider"
	ProviderService_GetProvider_FullMethodName      = "/car_wash.ProviderService/GetProvider"
	ProviderService_ListAllProviders_FullMethodName = "/car_wash.ProviderService/ListAllProviders"
	ProviderService_UpdateProvider_FullMethodName   = "/car_wash.ProviderService/UpdateProvider"
	ProviderService_DeleteProvider_FullMethodName   = "/car_wash.ProviderService/DeleteProvider"
	ProviderService_SearchProviders_FullMethodName  = "/car_wash.ProviderService/SearchProviders"
)

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServiceClient interface {
	RegisterProvider(ctx context.Context, in *RegisterProviderReq, opts ...grpc.CallOption) (*RegisterProviderResp, error)
	GetProvider(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GetProviderResp, error)
	ListAllProviders(ctx context.Context, in *ListAllProvidersReq, opts ...grpc.CallOption) (*ListAllProvidersResp, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderReq, opts ...grpc.CallOption) (*UpdateProviderResp, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderReq, opts ...grpc.CallOption) (*DeleteProviderResp, error)
	SearchProviders(ctx context.Context, in *SearchProvidersReq, opts ...grpc.CallOption) (*SearchProvidersResp, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) RegisterProvider(ctx context.Context, in *RegisterProviderReq, opts ...grpc.CallOption) (*RegisterProviderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterProviderResp)
	err := c.cc.Invoke(ctx, ProviderService_RegisterProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) GetProvider(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GetProviderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderResp)
	err := c.cc.Invoke(ctx, ProviderService_GetProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) ListAllProviders(ctx context.Context, in *ListAllProvidersReq, opts ...grpc.CallOption) (*ListAllProvidersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllProvidersResp)
	err := c.cc.Invoke(ctx, ProviderService_ListAllProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) UpdateProvider(ctx context.Context, in *UpdateProviderReq, opts ...grpc.CallOption) (*UpdateProviderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProviderResp)
	err := c.cc.Invoke(ctx, ProviderService_UpdateProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderReq, opts ...grpc.CallOption) (*DeleteProviderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProviderResp)
	err := c.cc.Invoke(ctx, ProviderService_DeleteProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) SearchProviders(ctx context.Context, in *SearchProvidersReq, opts ...grpc.CallOption) (*SearchProvidersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProvidersResp)
	err := c.cc.Invoke(ctx, ProviderService_SearchProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations must embed UnimplementedProviderServiceServer
// for forward compatibility
type ProviderServiceServer interface {
	RegisterProvider(context.Context, *RegisterProviderReq) (*RegisterProviderResp, error)
	GetProvider(context.Context, *GetById) (*GetProviderResp, error)
	ListAllProviders(context.Context, *ListAllProvidersReq) (*ListAllProvidersResp, error)
	UpdateProvider(context.Context, *UpdateProviderReq) (*UpdateProviderResp, error)
	DeleteProvider(context.Context, *DeleteProviderReq) (*DeleteProviderResp, error)
	SearchProviders(context.Context, *SearchProvidersReq) (*SearchProvidersResp, error)
	mustEmbedUnimplementedProviderServiceServer()
}

// UnimplementedProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServiceServer struct {
}

func (UnimplementedProviderServiceServer) RegisterProvider(context.Context, *RegisterProviderReq) (*RegisterProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProvider not implemented")
}
func (UnimplementedProviderServiceServer) GetProvider(context.Context, *GetById) (*GetProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedProviderServiceServer) ListAllProviders(context.Context, *ListAllProvidersReq) (*ListAllProvidersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProviders not implemented")
}
func (UnimplementedProviderServiceServer) UpdateProvider(context.Context, *UpdateProviderReq) (*UpdateProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedProviderServiceServer) DeleteProvider(context.Context, *DeleteProviderReq) (*DeleteProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedProviderServiceServer) SearchProviders(context.Context, *SearchProvidersReq) (*SearchProvidersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProviders not implemented")
}
func (UnimplementedProviderServiceServer) mustEmbedUnimplementedProviderServiceServer() {}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_RegisterProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).RegisterProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_RegisterProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).RegisterProvider(ctx, req.(*RegisterProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_GetProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetProvider(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_ListAllProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllProvidersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).ListAllProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_ListAllProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).ListAllProviders(ctx, req.(*ListAllProvidersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_UpdateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).UpdateProvider(ctx, req.(*UpdateProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_DeleteProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).DeleteProvider(ctx, req.(*DeleteProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_SearchProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProvidersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).SearchProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_SearchProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).SearchProviders(ctx, req.(*SearchProvidersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car_wash.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProvider",
			Handler:    _ProviderService_RegisterProvider_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _ProviderService_GetProvider_Handler,
		},
		{
			MethodName: "ListAllProviders",
			Handler:    _ProviderService_ListAllProviders_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _ProviderService_UpdateProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ProviderService_DeleteProvider_Handler,
		},
		{
			MethodName: "SearchProviders",
			Handler:    _ProviderService_SearchProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/providers.proto",
}
