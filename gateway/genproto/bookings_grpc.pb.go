// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/bookings.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Bookings_AddBooking_FullMethodName            = "/car_wash.Bookings/AddBooking"
	Bookings_GetBooking_FullMethodName            = "/car_wash.Bookings/GetBooking"
	Bookings_ListAllBookings_FullMethodName       = "/car_wash.Bookings/ListAllBookings"
	Bookings_UpdateBooking_FullMethodName         = "/car_wash.Bookings/UpdateBooking"
	Bookings_DeleteBooking_FullMethodName         = "/car_wash.Bookings/DeleteBooking"
	Bookings_GetBookingsByProvider_FullMethodName = "/car_wash.Bookings/GetBookingsByProvider"
)

// BookingsClient is the client API for Bookings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingsClient interface {
	AddBooking(ctx context.Context, in *AddBookingReq, opts ...grpc.CallOption) (*Empty, error)
	GetBooking(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GetBookingResp, error)
	ListAllBookings(ctx context.Context, in *ListAllBookingsReq, opts ...grpc.CallOption) (*ListAllBookingsResp, error)
	UpdateBooking(ctx context.Context, in *UpdateBookingReq, opts ...grpc.CallOption) (*UpdateBookingResp, error)
	DeleteBooking(ctx context.Context, in *DeleteBookingReq, opts ...grpc.CallOption) (*DeleteBookingResp, error)
	GetBookingsByProvider(ctx context.Context, in *BookingsByProviderReq, opts ...grpc.CallOption) (*BookingsByProviderResp, error)
}

type bookingsClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingsClient(cc grpc.ClientConnInterface) BookingsClient {
	return &bookingsClient{cc}
}

func (c *bookingsClient) AddBooking(ctx context.Context, in *AddBookingReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Bookings_AddBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) GetBooking(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GetBookingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingResp)
	err := c.cc.Invoke(ctx, Bookings_GetBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) ListAllBookings(ctx context.Context, in *ListAllBookingsReq, opts ...grpc.CallOption) (*ListAllBookingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllBookingsResp)
	err := c.cc.Invoke(ctx, Bookings_ListAllBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) UpdateBooking(ctx context.Context, in *UpdateBookingReq, opts ...grpc.CallOption) (*UpdateBookingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookingResp)
	err := c.cc.Invoke(ctx, Bookings_UpdateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) DeleteBooking(ctx context.Context, in *DeleteBookingReq, opts ...grpc.CallOption) (*DeleteBookingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBookingResp)
	err := c.cc.Invoke(ctx, Bookings_DeleteBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) GetBookingsByProvider(ctx context.Context, in *BookingsByProviderReq, opts ...grpc.CallOption) (*BookingsByProviderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingsByProviderResp)
	err := c.cc.Invoke(ctx, Bookings_GetBookingsByProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingsServer is the server API for Bookings service.
// All implementations must embed UnimplementedBookingsServer
// for forward compatibility
type BookingsServer interface {
	AddBooking(context.Context, *AddBookingReq) (*Empty, error)
	GetBooking(context.Context, *GetById) (*GetBookingResp, error)
	ListAllBookings(context.Context, *ListAllBookingsReq) (*ListAllBookingsResp, error)
	UpdateBooking(context.Context, *UpdateBookingReq) (*UpdateBookingResp, error)
	DeleteBooking(context.Context, *DeleteBookingReq) (*DeleteBookingResp, error)
	GetBookingsByProvider(context.Context, *BookingsByProviderReq) (*BookingsByProviderResp, error)
	mustEmbedUnimplementedBookingsServer()
}

// UnimplementedBookingsServer must be embedded to have forward compatible implementations.
type UnimplementedBookingsServer struct {
}

func (UnimplementedBookingsServer) AddBooking(context.Context, *AddBookingReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBooking not implemented")
}
func (UnimplementedBookingsServer) GetBooking(context.Context, *GetById) (*GetBookingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBookingsServer) ListAllBookings(context.Context, *ListAllBookingsReq) (*ListAllBookingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllBookings not implemented")
}
func (UnimplementedBookingsServer) UpdateBooking(context.Context, *UpdateBookingReq) (*UpdateBookingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedBookingsServer) DeleteBooking(context.Context, *DeleteBookingReq) (*DeleteBookingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBooking not implemented")
}
func (UnimplementedBookingsServer) GetBookingsByProvider(context.Context, *BookingsByProviderReq) (*BookingsByProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingsByProvider not implemented")
}
func (UnimplementedBookingsServer) mustEmbedUnimplementedBookingsServer() {}

// UnsafeBookingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingsServer will
// result in compilation errors.
type UnsafeBookingsServer interface {
	mustEmbedUnimplementedBookingsServer()
}

func RegisterBookingsServer(s grpc.ServiceRegistrar, srv BookingsServer) {
	s.RegisterService(&Bookings_ServiceDesc, srv)
}

func _Bookings_AddBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).AddBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookings_AddBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).AddBooking(ctx, req.(*AddBookingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookings_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).GetBooking(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_ListAllBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllBookingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).ListAllBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookings_ListAllBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).ListAllBookings(ctx, req.(*ListAllBookingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookings_UpdateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).UpdateBooking(ctx, req.(*UpdateBookingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_DeleteBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).DeleteBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookings_DeleteBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).DeleteBooking(ctx, req.(*DeleteBookingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_GetBookingsByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingsByProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).GetBookingsByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookings_GetBookingsByProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).GetBookingsByProvider(ctx, req.(*BookingsByProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookings_ServiceDesc is the grpc.ServiceDesc for Bookings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car_wash.Bookings",
	HandlerType: (*BookingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBooking",
			Handler:    _Bookings_AddBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _Bookings_GetBooking_Handler,
		},
		{
			MethodName: "ListAllBookings",
			Handler:    _Bookings_ListAllBookings_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _Bookings_UpdateBooking_Handler,
		},
		{
			MethodName: "DeleteBooking",
			Handler:    _Bookings_DeleteBooking_Handler,
		},
		{
			MethodName: "GetBookingsByProvider",
			Handler:    _Bookings_GetBookingsByProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/bookings.proto",
}
