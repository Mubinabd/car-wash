// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/services.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServicesService_AddService_FullMethodName              = "/car_wash.ServicesService/AddService"
	ServicesService_GetServices_FullMethodName             = "/car_wash.ServicesService/GetServices"
	ServicesService_ListAllServices_FullMethodName         = "/car_wash.ServicesService/ListAllServices"
	ServicesService_UpdateService_FullMethodName           = "/car_wash.ServicesService/UpdateService"
	ServicesService_DeleteService_FullMethodName           = "/car_wash.ServicesService/DeleteService"
	ServicesService_SearchServices_FullMethodName          = "/car_wash.ServicesService/SearchServices"
	ServicesService_GetServicesByPriceRange_FullMethodName = "/car_wash.ServicesService/GetServicesByPriceRange"
)

// ServicesServiceClient is the client API for ServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesServiceClient interface {
	AddService(ctx context.Context, in *AddServiceReq, opts ...grpc.CallOption) (*Empty, error)
	GetServices(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GetServicesResp, error)
	ListAllServices(ctx context.Context, in *ListAllServicesReq, opts ...grpc.CallOption) (*ListAllServicesResp, error)
	UpdateService(ctx context.Context, in *UpdateServiceReq, opts ...grpc.CallOption) (*UpdateServiceResp, error)
	DeleteService(ctx context.Context, in *DeleteServiesReq, opts ...grpc.CallOption) (*DeleteServiesResp, error)
	SearchServices(ctx context.Context, in *SearchServicessReq, opts ...grpc.CallOption) (*SearchServicessResp, error)
	GetServicesByPriceRange(ctx context.Context, in *GetServicesByPriceRangeReq, opts ...grpc.CallOption) (*GetServicesByPriceRangeResp, error)
}

type servicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesServiceClient(cc grpc.ClientConnInterface) ServicesServiceClient {
	return &servicesServiceClient{cc}
}

func (c *servicesServiceClient) AddService(ctx context.Context, in *AddServiceReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServicesService_AddService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) GetServices(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*GetServicesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesResp)
	err := c.cc.Invoke(ctx, ServicesService_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) ListAllServices(ctx context.Context, in *ListAllServicesReq, opts ...grpc.CallOption) (*ListAllServicesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllServicesResp)
	err := c.cc.Invoke(ctx, ServicesService_ListAllServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) UpdateService(ctx context.Context, in *UpdateServiceReq, opts ...grpc.CallOption) (*UpdateServiceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceResp)
	err := c.cc.Invoke(ctx, ServicesService_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) DeleteService(ctx context.Context, in *DeleteServiesReq, opts ...grpc.CallOption) (*DeleteServiesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServiesResp)
	err := c.cc.Invoke(ctx, ServicesService_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) SearchServices(ctx context.Context, in *SearchServicessReq, opts ...grpc.CallOption) (*SearchServicessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchServicessResp)
	err := c.cc.Invoke(ctx, ServicesService_SearchServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) GetServicesByPriceRange(ctx context.Context, in *GetServicesByPriceRangeReq, opts ...grpc.CallOption) (*GetServicesByPriceRangeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesByPriceRangeResp)
	err := c.cc.Invoke(ctx, ServicesService_GetServicesByPriceRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServiceServer is the server API for ServicesService service.
// All implementations must embed UnimplementedServicesServiceServer
// for forward compatibility
type ServicesServiceServer interface {
	AddService(context.Context, *AddServiceReq) (*Empty, error)
	GetServices(context.Context, *GetById) (*GetServicesResp, error)
	ListAllServices(context.Context, *ListAllServicesReq) (*ListAllServicesResp, error)
	UpdateService(context.Context, *UpdateServiceReq) (*UpdateServiceResp, error)
	DeleteService(context.Context, *DeleteServiesReq) (*DeleteServiesResp, error)
	SearchServices(context.Context, *SearchServicessReq) (*SearchServicessResp, error)
	GetServicesByPriceRange(context.Context, *GetServicesByPriceRangeReq) (*GetServicesByPriceRangeResp, error)
	mustEmbedUnimplementedServicesServiceServer()
}

// UnimplementedServicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServiceServer struct {
}

func (UnimplementedServicesServiceServer) AddService(context.Context, *AddServiceReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedServicesServiceServer) GetServices(context.Context, *GetById) (*GetServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedServicesServiceServer) ListAllServices(context.Context, *ListAllServicesReq) (*ListAllServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllServices not implemented")
}
func (UnimplementedServicesServiceServer) UpdateService(context.Context, *UpdateServiceReq) (*UpdateServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedServicesServiceServer) DeleteService(context.Context, *DeleteServiesReq) (*DeleteServiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServicesServiceServer) SearchServices(context.Context, *SearchServicessReq) (*SearchServicessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServices not implemented")
}
func (UnimplementedServicesServiceServer) GetServicesByPriceRange(context.Context, *GetServicesByPriceRangeReq) (*GetServicesByPriceRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesByPriceRange not implemented")
}
func (UnimplementedServicesServiceServer) mustEmbedUnimplementedServicesServiceServer() {}

// UnsafeServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServiceServer will
// result in compilation errors.
type UnsafeServicesServiceServer interface {
	mustEmbedUnimplementedServicesServiceServer()
}

func RegisterServicesServiceServer(s grpc.ServiceRegistrar, srv ServicesServiceServer) {
	s.RegisterService(&ServicesService_ServiceDesc, srv)
}

func _ServicesService_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_AddService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).AddService(ctx, req.(*AddServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).GetServices(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_ListAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).ListAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_ListAllServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).ListAllServices(ctx, req.(*ListAllServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).UpdateService(ctx, req.(*UpdateServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).DeleteService(ctx, req.(*DeleteServiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_SearchServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchServicessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).SearchServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_SearchServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).SearchServices(ctx, req.(*SearchServicessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_GetServicesByPriceRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesByPriceRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).GetServicesByPriceRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_GetServicesByPriceRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).GetServicesByPriceRange(ctx, req.(*GetServicesByPriceRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesService_ServiceDesc is the grpc.ServiceDesc for ServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car_wash.ServicesService",
	HandlerType: (*ServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddService",
			Handler:    _ServicesService_AddService_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ServicesService_GetServices_Handler,
		},
		{
			MethodName: "ListAllServices",
			Handler:    _ServicesService_ListAllServices_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _ServicesService_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ServicesService_DeleteService_Handler,
		},
		{
			MethodName: "SearchServices",
			Handler:    _ServicesService_SearchServices_Handler,
		},
		{
			MethodName: "GetServicesByPriceRange",
			Handler:    _ServicesService_GetServicesByPriceRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/services.proto",
}
